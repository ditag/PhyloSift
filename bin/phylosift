#!/usr/bin/env perl
use warnings;
use strict;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use Getopt::Long;
use Phylosift::Phylosift;
use Carp;
use Phylosift::Utilities qw(debug);
use POSIX;
my $pair             = 0;
my $clean            = 0;
my $continue         = 0;
my $custom           = 0;
my $force            = 0;
my $my_debug         = 0;
my $coverage;
my $configuration;
my $help=0;
my $s16=0;
my $usage = qq~

$0

Usage
==========================================
> phylosift <Mode> <options> <sequence_file>

   sequence_file needs to be in fasta format

> phylosift <Mode> <options> --paired <sequence_file_1> <sequence_file_2>

   sequence_file_1 and _2 need to be in fastq format

Mode : Only execute a specific step in the pipeline
  all - execute all the following steps in that order.
  search - only execute the database searches + write candidate files
  align - hmmsearch + hmmalign + trims + coverage filters
  placer - run pplacer on the results from the align step
  summary - run the taxonomy assignment steps

Options Available at this time :
   -h --help             Prints the usage section of the README
   --custom <file>       Reads a custom marker list from a file otherwise use all the markers from the markers directory
   --threaded=<number>  Runs Blast and Hmmer using the number of processors specified
                        (DEFAULT : 1)
   --clean               Cleans the temporary files created by Phylosift (NOT YET IMPLEMENTED)
   --paired              Looks for 2 input files (paired end sequencing) in FastQ format.
                        Reversing the sequences for the second file listed
                        and appending to the corresponding pair from the first file listed.
   --continue            Enables the pipeline to continue to subsequent steps when not using the 'all' mode
   --isolate             Use this mode if you are running data from an Isolate genome

~;

my $ps = new Phylosift::Phylosift();
$ps->{"threads"} = 1;

GetOptions(
	"clean"      => \$clean,
	"paired"     => \$pair,        # used for paired fastQ input split in 2 different files
	"custom=s"   => \$custom,      #need a file containing the marker names to use without extensions ** marker names shouldn't contain '_'
	"f"          => \$force,       #overrides a previous run otherwise stop
	"continue"   => \$continue,    #when a mode different than all is used, continue the rest of Phylosift after the section specified by the mode is finished
	"threaded=i" => \$ps->{"threads"},
	"isolate"    => \$ps->{"isolate"},     #use when processing one or more isolate genomes
	"reverse"         => \$ps->{"reverseTranslate"},    #use to output the reverse translation of the AA alignments
	"besthit"         => \$ps->{"besthit"},             #should we keep only the best hit when there are multiple?
	"coverage=s"      => \$ps->{"coverage"},            #provides a contig/scaffold coverage file
	"updated_markers" => \$ps->{"updated"},             #Indicates if Phylosift uses the updated versions of the Markers.
	"extended"        => \$ps->{"extended"},  #Should the full extended set of markers be used?
	"config=s"        => \$ps->{"configuration"},       #custom config file
	"h"               => \$help,                #prints the usage part of the README file
	"help"            => \$help,                #same as -h
	"debug"           => \$my_debug,            #print debugging messages?
) || die $usage;
if ( $help != 0 ) {
	print $usage. "\n";
	die "End of Help message\n";
}

$Phylosift::Utilities::debuglevel = $my_debug;
debug("@ARGV\n");
if ( $pair == 0 ) {
	croak $usage unless ( $ARGV[0] && $ARGV[1] );
} elsif ( scalar(@ARGV) == 3 ) {
	croak $usage unless ( $ARGV[0] && $ARGV[1] && $ARGV[2] );
} else {
	croak $usage. "\nOR\n" . $usage . "\n";
}
# make sure we're on a 64-bit OS
unless ( (POSIX::uname)[4] =~ /64/ || $^O =~ /arwin/ ) {
	print STDERR (POSIX::uname)[4] . "\n";
	die "Sorry, PhyloSift requires a 64-bit OS to run.\n";
}
debug "PAIR : $pair\n";
if ( $pair == 0 ) {
	debug "notpaired @ARGV\n";
	$ps = $ps->initialize( $ARGV[0], $ARGV[1] );
} else {
	debug "INSIDE paired\n";
	$ps = $ps->initialize( $ARGV[0], $ARGV[1], $ARGV[2] );
}
debug "FORCE: " . $force . "\n";
debug "Continue : " . $continue . "\n";
$ps->run( $force, $custom, $continue );

